@article{10.1145/1328195.1328197,
author = {Shi, Yunhe and Casey, Kevin and Ertl, M. Anton and Gregg, David},
title = {Virtual Machine Showdown: Stack versus Registers},
year = {2008},
issue_date = {January 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {4},
issn = {1544-3566},
url = {https://doi.org/10.1145/1328195.1328197},
doi = {10.1145/1328195.1328197},
abstract = {Virtual machines (VMs) enable the distribution of programs in an architecture-neutral format, which can easily be interpreted or compiled. A long-running question in the design of VMs is whether a stack architecture or register architecture can be implemented more efficiently with an interpreter. We extend existing work on comparing virtual stack and virtual register architectures in three ways. First, our translation from stack to register code and optimization are much more sophisticated. The result is that we eliminate an average of more than 46% of executed VM instructions, with the bytecode size of the register machine being only 26% larger than that of the corresponding stack one. Second, we present a fully functional virtual-register implementation of the Java virtual machine (JVM), which supports Intel, AMD64, PowerPC and Alpha processors. This register VM supports inline-threaded, direct-threaded, token-threaded, and switch dispatch. Third, we present experimental results on a range of additional optimizations such as register allocation and elimination of redundant heap loads. On the AMD64 architecture the register machine using switch dispatch achieves an average speedup of 1.48 over the corresponding stack machine. Even using the more efficient inline-threaded dispatch, the register VM achieves a speedup of 1.15 over the equivalent stack-based VM.},
journal = {ACM Trans. Archit. Code Optim.},
month = jan,
articleno = {2},
numpages = {36},
keywords = {virtual machine, Interpreter, stack architecture, register architecture}
}
@article{10.1145/177492.177575,
author = {Briggs, Preston and Cooper, Keith D. and Torczon, Linda},
title = {Improvements to Graph Coloring Register Allocation},
year = {1994},
issue_date = {May 1994},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {16},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/177492.177575},
doi = {10.1145/177492.177575},
abstract = {We describe two improvements to Chaitin-style graph coloring register allocators. The first, optimistic coloring, uses a stronger heuristic to find a k-coloring for the interference graph. The second extends Chaitin's treatment of rematerialization to handle a larger class of values. These techniques are complementary. Optimistic coloring decreases the number of procedures that require spill code and reduces the amount of spill code when spilling is unavoidable. Rematerialization lowers the cost of spilling some values. This paper describes both of the techniques and our experience building and using register allocators that incorporate them. It provides a detailed description of optimistic coloring and rematerialization. It presents experimental data to show the performance of several versions of the register allocator on a suite of FORTRAN programs. It discusses several insights that we discovered only after repeated implementation of these allocators.},
journal = {ACM Trans. Program. Lang. Syst.},
month = may,
pages = {428–455},
numpages = {28},
keywords = {graph coloring, register allocation, code generation}
}
@article{doi:10.1137/0201010,
author = {Tarjan, Robert},
title = {Depth-First Search and Linear Graph Algorithms},
journal = {SIAM Journal on Computing},
volume = {1},
number = {2},
pages = {146-160},
year = {1972},
doi = {10.1137/0201010},

URL = { 
        https://doi.org/10.1137/0201010
    
},
eprint = { 
        https://doi.org/10.1137/0201010
    
}

}

@article{10.1145/1255450.1255452,
author = {De Sutter, Bjorn and Van Put, Ludo and De Bosschere, Koen},
title = {A Practical Interprocedural Dominance Algorithm},
year = {2007},
issue_date = {August 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {4},
issn = {0164-0925},
url = {https://doi.org/10.1145/1255450.1255452},
doi = {10.1145/1255450.1255452},
abstract = {Existing algorithms for computing dominators are formulated for control flow graphs of single procedures. With the rise of computing power, and the viability of whole-program analyses and optimizations, there is a growing need to extend the dominator computation algorithms to context-sensitive interprocedural dominators. Because the transitive reduction of the interprocedural dominator graph is not a tree, as in the intraprocedural case, it is not possible to extend existing algorithms directly. In this article, we propose a new algorithm for computing interprocedural dominators. Although the theoretical complexity of this new algorithm is as high as that of a straightforward iterative solution of the data flow equations, our experimental evaluation demonstrates that the algorithm is practically viable, even for programs consisting of several hundred thousands of basic blocks.},
journal = {ACM Trans. Program. Lang. Syst.},
month = aug,
pages = {19–es},
numpages = {44},
keywords = {interprocedural analysis, dominators, Interprocedural control flow graph}
}

@inproceedings{10.1145/73560.73562,
author = {Rosen, B. K. and Wegman, M. N. and Zadeck, F. K.},
title = {Global Value Numbers and Redundant Computations},
year = {1988},
isbn = {0897912527},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/73560.73562},
doi = {10.1145/73560.73562},
booktitle = {Proceedings of the 15th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {12–27},
numpages = {16},
location = {San Diego, California, USA},
series = {POPL '88}
}

@article{10.1145/357062.357071,
author = {Lengauer, Thomas and Tarjan, Robert Endre},
title = {A Fast Algorithm for Finding Dominators in a Flowgraph},
year = {1979},
issue_date = {July 1979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {1},
issn = {0164-0925},
url = {https://doi.org/10.1145/357062.357071},
doi = {10.1145/357062.357071},
abstract = {A fast algorithm for finding dominators in a flowgraph is presented. The algorithm uses 
depth-first search and an efficient method of computing functions defined on paths in trees. A simple implementation of the algorithm runs in O(m log n) time, where m is the number of edges and n is the number of vertices in the problem graph. A more sophisticated implementation runs in O(mα(m, n)) time, where α(m, n) is a functional inverse of Ackermann's function.Both versions of the algorithm were implemented in Algol W, a Stanford University version of Algol, and tested on an IBM 370/168. The programs were compared with an implementation by Purdom and Moore of a straightforward O(mn)-time algorithm, and with a bit vector algorithm described by Aho and Ullman. The fast algorithm beat the straightforward algorithm and the bit vector algorithm on all but the smallest graphs tested.},
journal = {ACM Trans. Program. Lang. Syst.},
month = jan,
pages = {121–141},
numpages = {21}
}

@article{10.1145/115372.115320,
author = {Cytron, Ron and Ferrante, Jeanne and Rosen, Barry K. and Wegman, Mark N. and Zadeck, F. Kenneth},
title = {Efficiently Computing Static Single Assignment Form and the Control Dependence Graph},
year = {1991},
issue_date = {Oct. 1991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0164-0925},
url = {https://doi.org/10.1145/115372.115320},
doi = {10.1145/115372.115320},
journal = {ACM Trans. Program. Lang. Syst.},
month = oct,
pages = {451–490},
numpages = {40},
keywords = {optimizing compilers, control dependence, def-use chain, control flow graph, dominator}
}